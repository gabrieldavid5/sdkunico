{"config":{"lang":["pt"],"separator":"[\\s\\u200b\\-_,:!=\\[\\]()\"`/]+|\\.(?!\\d)|&[lg]t;|(?!\\b)(?=[A-Z][a-z])","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"<p>Bem vindo ao SDK \u00danico.</p>"},{"location":"primeiros-passos/","title":"Primeiros Passos","text":"<p>For full documentation visit mkdocs.org.</p>"},{"location":"primeiros-passos/#code-annotation-examples","title":"Code Annotation Examples","text":""},{"location":"primeiros-passos/#codeblocks","title":"Codeblocks","text":"<p>Some <code>code</code> goes here.</p>"},{"location":"primeiros-passos/#plain-codeblock","title":"Plain codeblock","text":"<p>A plain codeblock:</p> <pre><code>Some code here\ndef myfunction()\n// some comment\n</code></pre>"},{"location":"primeiros-passos/#code-for-a-specific-language","title":"Code for a specific language","text":"<p>Some more code with the <code>py</code> at the start:</p> <pre><code>import tensorflow as tf\ndef whatever()\n</code></pre>"},{"location":"primeiros-passos/#with-a-title","title":"With a title","text":"bubble_sort.py<pre><code>def bubble_sort(items):\n    for i in range(len(items)):\n        for j in range(len(items) - 1 - i):\n            if items[j] &gt; items[j + 1]:\n                items[j], items[j + 1] = items[j + 1], items[j]\n</code></pre>"},{"location":"primeiros-passos/#with-line-numbers","title":"With line numbers","text":"<pre><code>def bubble_sort(items):\n    for i in range(len(items)):\n        for j in range(len(items) - 1 - i):\n            if items[j] &gt; items[j + 1]:\n                items[j], items[j + 1] = items[j + 1], items[j]\n</code></pre>"},{"location":"primeiros-passos/#highlighting-lines","title":"Highlighting lines","text":"<pre><code>def bubble_sort(items):\n    for i in range(len(items)):\n        for j in range(len(items) - 1 - i):\n            if items[j] &gt; items[j + 1]:\n                items[j], items[j + 1] = items[j + 1], items[j]\n</code></pre>"},{"location":"blog/","title":"Blog","text":""},{"location":"primeiros-passos/","title":"SDK \u00danico","text":"<p>O SDK \u00danico \u00e9 uma plataforma completa de integra\u00e7\u00e3o para Android, que permite aos desenvolvedores construir, implantar, gerenciar e escalar a camada de pagamento das automa\u00e7\u00f5es em dispositivos Smart Android das adquirentes.</p>"},{"location":"primeiros-passos/#visao-da-solucao","title":"Vis\u00e3o da Solu\u00e7\u00e3o","text":"<p>O SDK \u00danico atualmente oferece suporte para as seguintes opera\u00e7\u00f5es.</p> <p></p>"},{"location":"primeiros-passos/#operacoes-disponiveis-por-sdk","title":"Opera\u00e7\u00f5es Dispon\u00edveis por SDK","text":"<p>A seguinte tabela resume as opera\u00e7\u00f5es dispon\u00edveis para cada SDK de adquirente integrado ao SDK \u00danico.</p> Opera\u00e7\u00e3o TEF Stone REDE PagSeguro GetNet Cielo SafraPay Banrisul Ativar \u2714\ufe0f \u2714\ufe0f \u2714\ufe0f \u2714\ufe0f Cr\u00e9dito \u2714\ufe0f \u2714\ufe0f \u2714\ufe0f \u2714\ufe0f D\u00e9bito \u2714\ufe0f \u2714\ufe0f \u2714\ufe0f \u2714\ufe0f Voucher \u2714\ufe0f \u2714\ufe0f \u2714\ufe0f \u274c PIX \u2714\ufe0f \u2714\ufe0f \u274c \u2714\ufe0f Cancelar \u2714\ufe0f \u2714\ufe0f \u2714\ufe0f \u2714\ufe0f Revers\u00e3o \u2714\ufe0f \u2714\ufe0f \u2714\ufe0f \u274c Reimprimir \u2714\ufe0f \u2714\ufe0f \u2714\ufe0f \u274c <ul> <li>\"\u2714\ufe0f\" indica que a opera\u00e7\u00e3o \u00e9 suportada pelo SDK.</li> <li>\"\u274c\" indica que a opera\u00e7\u00e3o n\u00e3o \u00e9 suportada pelo SDK.</li> </ul> <p>Esta tabela facilita a visualiza\u00e7\u00e3o das funcionalidades oferecidas por cada adquirente atrav\u00e9s do SDK \u00danico.</p>"},{"location":"primeiros-passos/#adquirentes-integradas","title":"Adquirentes Integradas","text":"<ul> <li>Stone</li> <li>Linx Tef</li> </ul>"},{"location":"primeiros-passos/#adquirentes-em-desenvolvimento","title":"Adquirentes Em Desenvolvimento","text":"<ul> <li>Rede</li> <li>Pag Seguro</li> <li>Get Net</li> <li>Cielo</li> <li>Safra Pay</li> <li>Banrisul Vero</li> </ul>"},{"location":"primeiros-passos/#dispositivos-suportados","title":"Dispositivos Suportados","text":"<ul> <li>Sunmi P2-B</li> <li>Positivo L400</li> <li>Positivo L300</li> <li>Gertec GPOS 700X</li> <li>Gertec GPOS 700</li> </ul>"},{"location":"primeiros-passos/config-sdk/","title":"Configura\u00e7\u00e3o do SDK","text":""},{"location":"primeiros-passos/config-sdk/#primeiros-passos","title":"Primeiros passos","text":"<p>Para iniciar a configura\u00e7\u00e3o do SDK \u00fanico, o seu projeto precisa incluir as bibliotecas do SDK \u00danico. A solicita\u00e7\u00e3o da <code>Senha de Acesso</code> deve ser realizada a partir deste formul\u00e1rio.</p> <p>Esta senha \u00e9 intransfer\u00edvel e \u00e9 de responsabilidade de cada vertical solicitar para o seu time.</p>"},{"location":"primeiros-passos/config-sdk/#passo-1-configurar-o-repositorio","title":"Passo 1 - Configurar o reposit\u00f3rio","text":"<p>Adicione as vari\u00e1veis do Artifacts em seu <code>gradle.properties</code></p> <pre><code>azureUsername=stndtef\nazurePassword=YOUR_PASSWORD_HERE\n</code></pre> <p>Adicione ou edite o arquivo <code>settings.gradle.kts</code> do projeto principal.</p> <pre><code>val azureUsername = providers.gradleProperty(\"azureUsername\")\nval azurePassword = providers.gradleProperty(\"azurePassword\")\n\ndependencyResolutionManagement {\n    repositoriesMode.set(RepositoriesMode.FAIL_ON_PROJECT_REPOS)\n    repositories {\n        google()\n        mavenCentral()\n        maven {\n            name = \"SDK_UNICO\"\n            url = uri(\"https://pkgs.dev.azure.com/stndtef/SmartPOS/_packaging/SDK_UNICO/maven/v1\")\n            credentials{\n                username = azureUsername.orNull\n                password =  azurePassword.orNull\n            }\n        }\n    }\n}\n</code></pre> <p>Aten\u00e7\u00e3o</p> <p>Faz-se necess\u00e1rio, para cada SDK de adquirente, configurar as respectivas depend\u00eancias de adquirentes. Sendo de utiliza\u00e7\u00e3o excludente utilizar dois SDKs simultaneamente.</p>"},{"location":"primeiros-passos/config-sdk/#passo-2-configurar-as-dependencias-da-app","title":"Passo 2 - Configurar as depend\u00eancias da app","text":"<p>Adicione as depend\u00eancias de implementa\u00e7\u00e3o do SDK no <code>build.gradle</code> da app. O SDK \u00danico possui tr\u00eas depend\u00eancias principais: <code>commons</code>, <code>config</code> e <code>core</code> , que encapsulam os comportamentos das adquirentes. Todas estas s\u00e3o necess\u00e1rias para a compila\u00e7\u00e3o do projeto.</p> <ul> <li>Core library</li> </ul> MavenGradle <pre><code>&lt;dependency&gt;\n    &lt;groupId&gt;SDKPayServices&lt;/groupId&gt;\n    &lt;artifactId&gt;core&lt;/artifactId&gt;\n    &lt;version&gt;1.0.3&lt;/version&gt;\n&lt;/dependency&gt;\n</code></pre> <pre><code>compile(group: 'SDKPayServices', name: 'core', version: '1.0.3')\n</code></pre> <ul> <li>Commons library </li> </ul> MavenGradle <pre><code>&lt;dependency&gt;\n    &lt;groupId&gt;SDKPayServices&lt;/groupId&gt;\n    &lt;artifactId&gt;common&lt;/artifactId&gt;\n    &lt;version&gt;1.1.1&lt;/version&gt;\n&lt;/dependency&gt;\n</code></pre> <pre><code>compile(group: 'SDKPayServices', name: 'common', version: '1.1.1')\n</code></pre> <ul> <li>Config library </li> </ul> MavenGradle <pre><code>&lt;dependency&gt;\n    &lt;groupId&gt;SDKPayServices&lt;/groupId&gt;\n    &lt;artifactId&gt;config&lt;/artifactId&gt;\n    &lt;version&gt;1.1.1&lt;/version&gt;\n&lt;/dependency&gt;\n</code></pre> <pre><code>compile(group: 'SDKPayServices', name: 'config', version: '1.1.1')\n</code></pre> <p>Para adicionar o SDK da adquirente ao projeto, selecione a vers\u00e3o apropriada de release.</p> <ul> <li>Stone</li> </ul> MavenGradle <pre><code>    &lt;dependency&gt;\n        &lt;groupId&gt;SDKPayServices&lt;/groupId&gt;\n        &lt;artifactId&gt;stone&lt;/artifactId&gt;\n        &lt;version&gt;1.1.1&lt;/version&gt;\n    &lt;/dependency&gt;\n</code></pre> <pre><code>    compile(group: 'SDKPayServices', name: 'stone', version: '1.1.1')\n</code></pre> <ul> <li>PagSeguro</li> </ul> MavenGradle <pre><code>    &lt;dependency&gt;\n        &lt;groupId&gt;SDKPayServices&lt;/groupId&gt;\n        &lt;artifactId&gt;pagseguro&lt;/artifactId&gt;\n        &lt;version&gt;1.1.1&lt;/version&gt;\n    &lt;/dependency&gt;\n</code></pre> <pre><code>    compile(group: 'SDKPayServices', name: 'pagseguro', version: '1.1.1')\n</code></pre> <ul> <li>Getnet</li> </ul> MavenGradle <pre><code>    &lt;dependency&gt;\n        &lt;groupId&gt;SDKPayServices&lt;/groupId&gt;\n        &lt;artifactId&gt;getnet&lt;/artifactId&gt;\n        &lt;version&gt;0.1.3.15529&lt;/version&gt;\n    &lt;/dependency&gt;\n</code></pre> <p>```groovy</p> <p>compile(group: 'SDKPayServices', name: 'getnet', version: '0.1.3.15529')     ``` - Vero</p> MavenGradle <pre><code>&lt;dependency&gt;\n    &lt;groupId&gt;SDKPayServices&lt;/groupId&gt;\n    &lt;artifactId&gt;vero&lt;/artifactId&gt;\n    &lt;version&gt;0.1.3.15529&lt;/version&gt;\n&lt;/dependency&gt;\n</code></pre> <pre><code>    compile(group: 'SDKPayServices', name: 'vero', version: '0.1.3.15529')\n</code></pre> <p>Aten\u00e7\u00e3o</p> <p>Faz-se necess\u00e1rio, para cada SDK de adquirente, configurar as respectivas depend\u00eancias de adquirentes. Sendo de utiliza\u00e7\u00e3o excludente utilizar dois SDKs simultaneamente.</p> <p>Depend\u00eancias da Vero</p> Gradle <pre><code>android {\n    productFlavors {\n    create(\"linxtef\")\n    create(\"stone\") {\n        minSdk = 22\n        targetSdk = 34\n    }\n    create(\"pagseguro\") {\n        minSdk = 23\n    }\n    create(\"rede\")\n    create(\"getnet\") {\n        minSdk = 22\n    }\n    create(\"vero\"){\n        minSdk = 22\n    }\n}\n</code></pre>"},{"location":"primeiros-passos/config-sdk/#passo-3-verificacao-de-dependencias","title":"Passo 3 - Verifica\u00e7\u00e3o de depend\u00eancias","text":"<p>Realize a build do projeto e verifique se as depend\u00eancias foram resolvidas.</p>"},{"location":"primeiros-passos/etapas/","title":"Processo de Integra\u00e7\u00e3o","text":"<p>Para se integrar com o SDK \u00danico, voc\u00ea precisa passar as seguintes etapas:</p> <p></p> <p>Disponibilizamos um ambiente de sandbox (testes) onde \u00e9 poss\u00edvel simular todas as situa\u00e7\u00f5es que ocorrem em produ\u00e7\u00e3o, como transa\u00e7\u00f5es negadas e timeout.  Para receber uma credencial de integra\u00e7\u00e3o, \u00e9 necess\u00e1rio se cadastrar em nosso programa de parcerias.  Cadastre-se aqui.</p> <p></p> Etapa Atividade <code>Credenciamento</code> <p>Cadastro no Portal de Desenvolvimento do Sdk \u00danico</p> <p>Solicita\u00e7\u00e3o de terminal de desenvolvimento</p> <code>Download</code> <p>Baixar a \u00faltima vers\u00e3o do SDK \u00danico</p> <p>Baixar o aplicativo de Demonstra\u00e7\u00e3o</p> <code>Desenvolvimento</code> <p>Integra\u00e7\u00e3o da chamada de Pagamento em cr\u00e9dito \u00e0 vista (Cr\u00e9dito a vista)</p> <p>Integra\u00e7\u00e3o da chamada de Pagamento em cr\u00e9dito sem juros (Cr\u00e9dito Parcelado)</p> <p>Integra\u00e7\u00e3o da chamada de Pagamento em cr\u00e9dito com juros (Cr\u00e9dito Parcelado Emissor)</p> <p>Integra\u00e7\u00e3o da chamada de Pagamento em d\u00e9bito (D\u00e9bito)</p> <p>Integra\u00e7\u00e3o da chamada chamada de Pagamento por voucher (Voucher)</p> <p>Integra\u00e7\u00e3o da chamada de Estorno de Pagamentos</p> <p>Integra\u00e7\u00e3o da chamada de Impress\u00e3o de Comprovantes</p> <code>Distribui\u00e7\u00e3o do APK</code> <p>Selecionar o vers\u00e3o do SDK \u00danico espec\u00edfica da adquirente que deseja transacionar</p> <p>Gerar Deploy do APK compat\u00edvel com a adquirente selecionada.</p> <code>Roteiro de Testes</code> <p>Execu\u00e7\u00e3o dos roteiros de testes acompanhados pela equipe Linx Cross.</p> <p>Acompanhamento da execu\u00e7\u00e3o e corre\u00e7\u00f5es de Bug's no APK.</p> <code>Homologa\u00e7\u00e3o Adquirente</code> <p>Essa etapa ser\u00e1 apoiada pelo time Linx Cross, que ir\u00e1 preencher formul\u00e1rio de Certifica\u00e7\u00e3o, enviar e apoiar no roteiro de testes.</p> <code>Piloto</code> <p>Envio dos dados do estabelecimento que ir\u00e1 participar do projeto Piloto.</p> <p>Acompanhamento da execu\u00e7\u00e3o e corre\u00e7\u00f5es de Bug's no APK.</p> <code>Produ\u00e7\u00e3o</code> <p>Ao final da certifica\u00e7\u00e3o recebendo ser\u00e1 realizada a etapa de publica\u00e7\u00e3o do APK na loja da adquirente.</p>"},{"location":"primeiros-passos/integracao/","title":"Primeira Integra\u00e7\u00e3o","text":"<p>O SDK \u00fanico, em sua defini\u00e7\u00e3o, simplifica a integra\u00e7\u00e3o com os SDKs das adquirentes, a partir de sua interface \u00fanica. </p> <p>Para integrar sua aplica\u00e7\u00e3o com o SDK \u00danico, siga os passos abaixo. Certifique-se de adicionar os devidos imports e configurar os par\u00e2metros corretamente.</p> <pre><code>import android.util.Log\nimport com.linx.paykit.common.Callback\nimport com.linx.paykit.common.Paykit\nimport com.linx.paykit.common.activation.ActivationParameters\nimport com.linx.paykit.common.activation.ActivationResult\nimport com.linx.paykit.common.builder.Parameters\nimport com.linx.paykit.core.PaykitFactory\n\nval TAG = \"AutomacaoLinx\"\nvar paykit: Paykit? = null\n\nfun setupPaykit() {\n\n    paykit = PaykitFactory().build()\n\n    //Defina os par\u00e2metros de acordo com a adquirente\n    val params = ActivationParameters().apply {\n\n    }\n\n    paykit?.activate(p, object : Callback&lt;ActivationResult&gt; {\n        override fun execute(result: ActivationResult) {\n            Log.d(TAG, \"SDK Ativado com sucesso\")\n        }\n    })\n}\n</code></pre> <p>A classe <code>ActivationParameters</code> possui par\u00e2metros que variam de acordo com o SDK da Adquirente.</p> Linx DTEFStonePagSeguroRedeVero <pre><code>    val params = ActivationParameters().apply {\n        tef.cnpj = \"CNPJ\"\n        tef.production = false\n        tef.token = \"TOKEN\"\n        tef.host = \"TEF HOST\"\n    }\n</code></pre> <pre><code>    val params = ActivationParameters().apply {\n        stone.stoneCode = \"CODIGO_STONE\"\n        stone.context = this.applicationContext\n        stone.dialogMessage = \"Dialog Message\"\n        stone.dialogTitle = \"Dialog Title\"\n    }\n</code></pre> <pre><code>    val params = ActivationParameters().apply {\n        pagSeguro.activationCode = \"CODIGO_PAG_SEGURO\"\n    }\n</code></pre> <pre><code>    val params = ActivationParameters().apply {\n        rede.activationCode = \"CODIGO_REDE\"\n    }\n</code></pre> <p>Aten\u00e7\u00e3o</p> <p>Verifique na lista de depend\u00eancias do Android Studio a correta adi\u00e7\u00e3o do SDK da adquirente, de acordo com a vers\u00e3o solicitada no formul\u00e1rio de acesso ao SDK.</p>"},{"location":"primeiros-passos/projeto-exemplo/","title":"Projeto Exemplo","text":"<p>Para realizar testes com o SDK \u00danico, \u00e9 preciso selecionar com qual SDK deseja realizar a transa\u00e7\u00e3o. Para tal, disponiblizamos uma App de Exemplo espec\u00edfica por SDK de adquirente.</p> <p></p> SDK Vers\u00e3o SDK Adquirente Vers\u00e3o SDK \u00danico Link <code>DTEF</code> 1.0.3 1.1.1 Download <code>Stone</code> 1.0.3 1.1.1 Download <code>REDE</code> 1.0.3 1.1.1 Download <code>PagSeguro</code> 1.0.3 1.1.1 Download <code>Getnet</code> 1.0.3 1.1.1 Download"},{"location":"primeiros-passos/requisitos/","title":"Pre-requisitos para Integra\u00e7\u00e3o com o SDK \u00danico","text":"<p>Para integrar o SDK \u00danico na sua aplica\u00e7\u00e3o, \u00e9 necess\u00e1rio atender a determinados requisitos t\u00e9cnicos.</p>"},{"location":"primeiros-passos/requisitos/#requisitos-do-sistema-operacional","title":"Requisitos do Sistema Operacional","text":"<p>O SDK \u00danico \u00e9 desenvolvido nativamente para Android, sendo necess\u00e1rio que sua aplica\u00e7\u00e3o tamb\u00e9m seja Android ou possua uma interface/plugin que permita a comunica\u00e7\u00e3o se for h\u00edbrida. A vers\u00e3o m\u00ednima suportada do Android \u00e9 a 5.0+ (API 21) ou superior.</p>"},{"location":"primeiros-passos/requisitos/#versoes-do-so-android-dos-terminais","title":"Vers\u00f5es do S.O. Android dos Terminais","text":"<p>Os terminais compat\u00edveis possuem diferentes vers\u00f5es do sistema operacional, conforme definido pelo fabricante:</p> Stone DTEF REDE Getnet PagSeguro SUNMI P2  v7.1 SUNMI P2 Positivo L400 SUNMI P2 SUNMI P2 GPOS 700X: v8.1 AA AA AA AA Positivo L400 : v11 AA AA AA AA Positivo L300 : v7.1 AA AA AA AA APOS A8: v5.1 AA AA AA AA <p>\u00c9 essencial desenvolver com retrocompatibilidade para a vers\u00e3o m\u00ednima (5.0) a fim de garantir o funcionamento em todos os modelos.</p>"},{"location":"primeiros-passos/requisitos/#tamanho-do-apk","title":"Tamanho do APK","text":"<p>Para manter boas pr\u00e1ticas de gerenciamento de espa\u00e7o e uso de banda larga (3G/4G) nos terminais SmartPOS, o aplicativo deve ter no m\u00e1ximo 70MB</p>"},{"location":"releases/","title":"O que h\u00e1 de novo?","text":"<p>Aqui voc\u00ea encontrar\u00e1 as \u00faltimas atualiza\u00e7\u00f5es, recursos e melhorias lan\u00e7adas a cada m\u00eas.</p>"},{"location":"releases/#2024","title":"2024","text":""},{"location":"releases/#junho","title":"Junho","text":"<p>A primeira vers\u00e3o do SDK \u00danico foi lan\u00e7ada com suporte para conectividade com o LinxTef e Stone.</p> v1 <pre><code>Conectividade com SDK Mobile Linx Tef\n</code></pre> <pre><code>Conectividade com SDK Stone \n</code></pre>"},{"location":"releases/2024-06/","title":"Junho","text":"<p>Primeira vers\u00e3o do SDK</p>"},{"location":"transactions/","title":"Transa\u00e7\u00f5es","text":"<p>\"O SDK \u00danico \u00e9 uma biblioteca do PayKit, exclusiva para Android, respons\u00e1vel pela integra\u00e7\u00e3o de pagamentos.  Pode ser utilizado em terminais de pagamento para diversos tipos de transa\u00e7\u00f5es e fun\u00e7\u00f5es.  Este documento tem como objetivo explicar e demonstrar como utilizar a biblioteca paykit-sdk-unico para realizar opera\u00e7\u00f5es como pagamentos, estornos e reimpress\u00f5es em uma aplica\u00e7\u00e3o Android.</p>"},{"location":"transactions/#operacoes","title":"Opera\u00e7\u00f5es","text":"<p>O SDK \u00danico atualmente suporta as seguintes opera\u00e7\u00f5es.</p> <ul> <li>:fontawesome-solid-credit-card: ApiSDK \u2013 API do SDK \u00danico</li> <li>:fontawesome-solid-credit-card: Cr\u00e9dito \u00e0 Vista \u2013 Pagamento de cr\u00e9dito a vista</li> <li>:fontawesome-solid-credit-card: Cr\u00e9dito Parcelado \u2013 Pagamento de cr\u00e9dito Parcelado (Lojista ou Emissor)</li> <li>:fontawesome-regular-credit-card: D\u00e9bito \u2013 Pagamento por d\u00e9bito</li> <li>:fontawesome-solid-ticket: Voucher \u2013 Pagamento por voucher</li> <li>:simple-pix: Pix \u2013 Pagamento por Pix</li> <li>:fontawesome-solid-xmark: Estorno \u2013 Estorno de pagamentos</li> <li>:fontawesome-solid-print: Reimpress\u00e3o \u2013 Reimpress\u00f5es de comprovantes cliente/estabelecimento</li> </ul>"},{"location":"transactions/cancelamento/","title":"Cancelamento","text":"<p>O processo para realizar qualquer transa\u00e7\u00e3o, tem como premissa que a ativa\u00e7\u00e3o do SDK foi previamente realizada.  Para realizar uma Transa\u00e7\u00e3o de Cancelamento, utilize o exemplo abaixo. Ela realizar\u00e1 o desfazimento da \u00faltima transa\u00e7\u00e3o.</p> <pre><code>import android.os.Bundle\nimport android.util.Log\nimport androidx.appcompat.app.AppCompatActivity\nimport com.linx.paykit.common.Callback\nimport com.linx.paykit.common.Paykit\nimport com.linx.paykit.common.PaymentResult\nimport com.linx.paykit.common.builder.Parameters\nimport com.linx.paykit.common.parameter.CancelParameter\nimport com.linx.paykit.core.PaykitFactory\nimport java.math.BigDecimal\n\nclass MainActivity : AppCompatActivity() {\n\n    private lateinit var paykit: Paykit\n\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        setContentView(R.layout.activity_main)\n\n        paykit = PaykitFactory().build(Parameters(this.applicationContext, \"Transacao de Cancelamento\"))\n\n        val cancelParameter = CancelParameter(\n            transactionId = 1,  // (transactionId) NSU da Transa\u00e7\u00e3o\n            amount = BigDecimal(\"100.00\"),  // Valor da original da transa\u00e7\u00e3o\n            originalTransactionDate = Date()  // Data original da transa\u00e7\u00e3o\n        )\n\n        paykit.cancel(cancelParameter, object : Callback&lt;PaymentResult&gt; {\n            override fun execute(result: PaymentResult) {\n                 Log.i(\"PaymentResult\", \"ID: ${result.transactionId}, Transaction: ${result.transaction}\")\n                onPaymentResult(result.transactionId, result.transaction)\n            }\n        })\n    }\n\n    private fun onPaymentResult(transactionId: String, transaction: PaymentResult) {\n        // Implementar a l\u00f3gica para lidar com o resultado da revers\u00e3o\n    }\n}\n</code></pre>"},{"location":"transactions/cancelamento/#explicacao-do-paymentresult","title":"Explica\u00e7\u00e3o do PaymentResult","text":"<p>No <code>callBack</code> da transa\u00e7\u00e3o, \u00e9 poss\u00edvel capturar detalhes da adquirente, como detalhado a seguir.</p> <ul> <li>transactionId: Identificador \u00fanico da transa\u00e7\u00e3o (NSU).</li> <li>transaction: Objeto contendo o resultado detalhado da transa\u00e7\u00e3o da adquirente, \u00fatil para deserializa\u00e7\u00e3o.</li> <li>transactionType: Tipo de processador de pagamento utilizado (STONE, TEF, REDE, GETNET, PAGSEGURO, VERO).</li> <li>status: Status da transa\u00e7\u00e3o.</li> <li>message: Mensagem de sucesso ou erro, se houver.</li> </ul>"},{"location":"transactions/credito-a-vista/","title":"Cr\u00e9dito \u00e0 Vista","text":"<p>O processo para realizar qualquer transa\u00e7\u00e3o, tem como premissa que a ativa\u00e7\u00e3o do SDK foi previamente realizada.  Para realizar uma Transa\u00e7\u00e3o de Cr\u00e9dito \u00e0 vista, utilize o exemplo abaixo.</p> <pre><code>import android.os.Bundle\nimport android.util.Log\nimport androidx.appcompat.app.AppCompatActivity\nimport com.linx.paykit.common.Callback\nimport com.linx.paykit.common.Paykit\nimport com.linx.paykit.common.PaymentResult\nimport com.linx.paykit.common.builder.Parameters\nimport com.linx.paykit.common.parameter.PaymentParameters\nimport com.linx.paykit.core.PaykitFactory\nimport java.math.BigDecimal\n\nclass MainActivity : AppCompatActivity() {\n\n    private lateinit var paykit: Paykit\n\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        setContentView(R.layout.activity_main)\n\n        PaykitFactory().build(Parameters(context, APP_NAME))\n\n        paykit = PaykitFactory().build(Parameters(this.applicationContext, \"Credito \u00e0 Vista\"))\n\n        val creditParameter = PaymentParameters(\n            installments = 1,  // N\u00famero de parcelas (1 para cr\u00e9dito \u00e0 vista)\n            amount = BigDecimal(\"100.00\"),  // Valor da transa\u00e7\u00e3o\n            automaticConfirmation = true  // Confirma\u00e7\u00e3o autom\u00e1tica\n        )\n\n        paykit.credit(creditParameter, object : Callback&lt;PaymentResult&gt; {\n            override fun execute(result: PaymentResult) {\n                Log.i(\"PaymentResult\", \"ID: ${result.id}, Transaction: ${result.transactionData}\")\n                onPaymentResult(result.id, result.transaction)\n            }\n        })\n    }\n\n    private fun onPaymentResult(id: String, transaction: PaymentResult) {\n        // Implementar a l\u00f3gica para lidar com o resultado do pagamento\n    }\n}\n</code></pre>"},{"location":"transactions/credito-parcelado/","title":"Cr\u00e9dito Parcelado","text":"<p>O processo para realizar qualquer transa\u00e7\u00e3o, tem como premissa que a ativa\u00e7\u00e3o do SDK foi previamente realizada.  Para realizar uma Transa\u00e7\u00e3o de Cr\u00e9dito parcelado, utilize o exemplo abaixo. </p> <p>Aten\u00e7\u00e3o</p> <p>Verifique os parametros da transa\u00e7\u00e3o. Os atributos devem seguir os crit\u00e9rios: - installments: MAIOR ou igual a 1 - amount: MAIOR ou igual a 1</p> <pre><code>import android.os.Bundle\nimport android.util.Log\nimport androidx.appcompat.app.AppCompatActivity\nimport com.linx.paykit.common.Callback\nimport com.linx.paykit.common.Paykit\nimport com.linx.paykit.common.PaymentResult\nimport com.linx.paykit.common.builder.Parameters\nimport com.linx.paykit.common.parameter.PaymentParameters\nimport com.linx.paykit.core.PaykitFactory\nimport java.math.BigDecimal\n\nclass MainActivity : AppCompatActivity() {\n\n    private lateinit var paykit: Paykit\n\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        setContentView(R.layout.activity_main)\n\n        paykit = PaykitFactory().build(Parameters(this.applicationContext, \"Credito parcelado\"))\n\n        val creditParameter = PaymentParameters(\n            installments = 2,  // N\u00famero de parcelas\n            amount = BigDecimal(\"100.00\"),  // Valor da transa\u00e7\u00e3o\n            automaticConfirmation = true  // Confirma\u00e7\u00e3o autom\u00e1tica\n        )\n\n        paykit.credit(creditParameter, object : Callback&lt;PaymentResult&gt; {\n            override fun execute(result: PaymentResult) {\n                Log.i(\"PaymentResult\", \"ID: ${result.transactionId}, Transaction: ${result.transaction}\")\n                onPaymentResult(result.transactionId, result.transaction)\n            }\n        })\n    }\n\n    private fun onPaymentResult(transactionId: String, transaction: PaymentResult) {\n        // Implementar a l\u00f3gica para lidar com o resultado do pagamento\n    }\n}\n</code></pre>"},{"location":"transactions/credito-parcelado/#explicacao-do-paymentresult","title":"Explica\u00e7\u00e3o do PaymentResult","text":"<p>No <code>callBack</code> da transa\u00e7\u00e3o, \u00e9 poss\u00edvel capturar detalhes da adquirente, como detalhado a seguir.</p> <ul> <li>transactionId: Identificador \u00fanico da transa\u00e7\u00e3o (NSU).</li> <li>transaction: Objeto contendo o resultado detalhado da transa\u00e7\u00e3o da adquirente, \u00fatil para deserializa\u00e7\u00e3o.</li> <li>transactionType: Tipo de processador de pagamento utilizado (STONE, TEF, REDE, GETNET, PAGSEGURO, VERO).</li> <li>status: Status da transa\u00e7\u00e3o.</li> <li>status: Status da transa\u00e7\u00e3o.</li> <li>message: Mensagem de sucesso ou erro, se houver.</li> </ul>"},{"location":"transactions/debito/","title":"D\u00e9bito","text":"<p>O processo para realizar qualquer transa\u00e7\u00e3o, tem como premissa que a ativa\u00e7\u00e3o do SDK foi previamente realizada.  Para realizar uma Transa\u00e7\u00e3o de D\u00e9bito, utilize o exemplo abaixo. </p> <p>Aten\u00e7\u00e3o</p> <p>Verifique os parametros da transa\u00e7\u00e3o. Os atributos devem seguir os crit\u00e9rios:  - amount: MAIOR ou igual a 1</p> <pre><code>import android.os.Bundle\nimport android.util.Log\nimport androidx.appcompat.app.AppCompatActivity\nimport com.linx.paykit.common.Callback\nimport com.linx.paykit.common.Paykit\nimport com.linx.paykit.common.PaymentResult\nimport com.linx.paykit.common.builder.Parameters\nimport com.linx.paykit.common.parameter.PaymentParameters\nimport com.linx.paykit.core.PaykitFactory\nimport java.math.BigDecimal\n\nclass MainActivity : AppCompatActivity() {\n\n    private lateinit var paykit: Paykit\n\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        setContentView(R.layout.activity_main)\n\n        paykit = PaykitFactory().build(Parameters(this.applicationContext, \"Transacao de Debito\"))\n\n        val debitParameter = PaymentParameters(\n            amount = BigDecimal(\"100.00\"),  // Valor da transa\u00e7\u00e3o\n            automaticConfirmation = true  // Confirma\u00e7\u00e3o autom\u00e1tica\n        )\n\n        paykit.credit(debitParameter, object : Callback&lt;PaymentResult&gt; {\n            override fun execute(result: PaymentResult) {\n                Log.i(\"PaymentResult\", \"ID: ${result.transactionId}, Transaction: ${result.transaction}\")\n                onPaymentResult(result.transactionId, result.transaction)\n            }\n        })\n    }\n\n    private fun onPaymentResult(transactionId: String, transaction: PaymentResult) {\n        // Implementar a l\u00f3gica para lidar com o resultado do pagamento\n    }\n}\n</code></pre>"},{"location":"transactions/debito/#explicacao-do-paymentresult","title":"Explica\u00e7\u00e3o do PaymentResult","text":"<p>No <code>callBack</code> da transa\u00e7\u00e3o, \u00e9 poss\u00edvel capturar detalhes da adquirente, como detalhado a seguir.</p> <ul> <li>transactionId: Identificador \u00fanico da transa\u00e7\u00e3o (NSU).</li> <li>transaction: Objeto contendo o resultado detalhado da transa\u00e7\u00e3o da adquirente, \u00fatil para deserializa\u00e7\u00e3o.</li> <li>transactionType: Tipo de processador de pagamento utilizado (STONE, TEF, REDE, GETNET, PAGSEGURO, VERO).</li> <li>status: Status da transa\u00e7\u00e3o.</li> <li>message: Mensagem de sucesso ou erro, se houver.</li> </ul>"},{"location":"transactions/estorno/","title":"Estorno","text":"<p>O processo para realizar qualquer transa\u00e7\u00e3o, tem como premissa que a ativa\u00e7\u00e3o do SDK foi previamente realizada.  Para realizar uma Transa\u00e7\u00e3o de Revers\u00e3o, utilize o exemplo abaixo. Ela realizar\u00e1 o desfazimento da \u00faltima transa\u00e7\u00e3o.</p> <pre><code>import android.os.Bundle\nimport android.util.Log\nimport androidx.appcompat.app.AppCompatActivity\nimport com.linx.paykit.common.Callback\nimport com.linx.paykit.common.Paykit\nimport com.linx.paykit.common.PaymentResult\nimport com.linx.paykit.common.builder.Parameters\nimport com.linx.paykit.core.PaykitFactory\nimport java.math.BigDecimal\n\nclass MainActivity : AppCompatActivity() {\n\n    private lateinit var paykit: Paykit\n\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        setContentView(R.layout.activity_main)\n\n        paykit = PaykitFactory().build(Parameters(this.applicationContext, \"Transacao de Revers\u00e3o\"))\n\n        paykit.reversal(object : Callback&lt;PaymentResult&gt; {\n            override fun execute(result: PaymentResult) {\n                Log.i(\"PaymentResult\", \"Status: ${result.status}\")\n                onPaymentResult(result.transaction)\n            }\n        })\n    }\n\n    private fun onPaymentResult(transaction: PaymentResult) {\n        // Implementar a l\u00f3gica para lidar com o resultado da revers\u00e3o\n    }\n}\n</code></pre>"},{"location":"transactions/estorno/#explicacao-do-paymentresult","title":"Explica\u00e7\u00e3o do PaymentResult","text":"<p>No <code>callBack</code> da transa\u00e7\u00e3o, \u00e9 poss\u00edvel capturar detalhes da adquirente, como detalhado a seguir.</p> <ul> <li>transactionId: Identificador \u00fanico da transa\u00e7\u00e3o (NSU).</li> <li>transaction: Objeto contendo o resultado detalhado da transa\u00e7\u00e3o da adquirente, \u00fatil para deserializa\u00e7\u00e3o.</li> <li>transactionType: Tipo de processador de pagamento utilizado (STONE, TEF, REDE, GETNET, PAGSEGURO).</li> <li>status: Status da transa\u00e7\u00e3o.</li> <li>message: Mensagem de sucesso ou erro, se houver.</li> </ul>"},{"location":"transactions/paykit/","title":"API do SDK \u00danico","text":""},{"location":"transactions/paykit/#interface-paykit","title":"Interface Paykit","text":"<p>A interface <code>Paykit</code> define os m\u00e9todos que cada adquirente deve implementar para realizar transa\u00e7\u00f5es de pagamento.</p>"},{"location":"transactions/paykit/#metodos","title":"M\u00e9todos","text":"M\u00e9todo Descri\u00e7\u00e3o Par\u00e2metros Retorno activate Ativa o SDK com os par\u00e2metros fornecidos. <code>activationParameters</code>: Par\u00e2metros de ativa\u00e7\u00e3o. <code>ActivationResult</code> credit Realiza uma transa\u00e7\u00e3o de cr\u00e9dito. <code>paymentParameters</code>: Par\u00e2metros da transa\u00e7\u00e3o. <code>PaymentResult</code> debit Realiza uma transa\u00e7\u00e3o de d\u00e9bito. <code>paymentParameters</code>: Par\u00e2metros da transa\u00e7\u00e3o. <code>PaymentResult</code> voucher Processa um pagamento por meio de voucher. <code>paymentParameters</code>: Par\u00e2metros da transa\u00e7\u00e3o. <code>PaymentResult</code> pix Processa um pagamento via PIX. <code>paymentParameters</code>: Par\u00e2metros da transa\u00e7\u00e3o. <code>PaymentResult</code> wallet Processa um pagamento utilizando carteira digital. <code>paymentParameters</code>: Par\u00e2metros da transa\u00e7\u00e3o. <code>PaymentResult</code> cancel Cancela uma transa\u00e7\u00e3o. <code>cancelParameter</code>: Par\u00e2metros de cancelamento. <code>PaymentResult</code> confirmPendingTransaction Confirma uma transa\u00e7\u00e3o pendente. <code>pendingTransactionParameters</code>: Par\u00e2metros da transa\u00e7\u00e3o pendente. <code>Boolean</code> undoPendingTransaction Desfaz uma transa\u00e7\u00e3o pendente. <code>pendingTransactionParameters</code>: Par\u00e2metros da transa\u00e7\u00e3o pendente. <code>Boolean</code> printLastReceipt Imprime o \u00faltimo recibo. <code>receiptType</code>: Tipo de recibo a ser impresso. <code>Boolean</code> print Imprime uma imagem bitmap. <code>bitmap</code>: A imagem a ser impressa. <code>Boolean</code> retrieveSdkInfo Recupera informa\u00e7\u00f5es sobre o SDK. <code>callback</code>: Callback para receber as informa\u00e7\u00f5es do SDK. <code>SdkInfo</code>"},{"location":"transactions/paykit/#configurar-uma-transacao-de-pagamento","title":"Configurar uma transa\u00e7\u00e3o de pagamento","text":"<p>Para realizar uma transa\u00e7\u00e3o de pagamento, utilize a classe <code>PaymentParameters</code> definindo os par\u00e2metros de acordo com o tipo da transa\u00e7\u00e3o.</p>"},{"location":"transactions/paykit/#parametros","title":"Par\u00e2metros:","text":"Campo Tipo Descri\u00e7\u00e3o automaticConfirmation <code>Boolean</code> Indica se a confirma\u00e7\u00e3o da transa\u00e7\u00e3o deve ser autom\u00e1tica. amount <code>BigDecimal</code> O valor total da transa\u00e7\u00e3o. installments <code>Int</code> O n\u00famero de parcelas para pagamento. O valor . cpf <code>String?</code> CPF do cliente, se aplic\u00e1vel. Este campo \u00e9 opcional. financialType <code>FinancialType</code> O tipo de financiamento da transa\u00e7\u00e3o. Poss\u00edveis valores: - <code>FinancialType.ISSUER</code>: Parcelado pelo cliente. - <code>FinancialType.ONE_INSTALMENT</code>: Pagamento em uma \u00fanica parcela. - <code>FinancialType.MERCHANT</code>: Parcelado pelo lojista. - <code>FinancialType.PRE_DATED</code>: Pagamento pr\u00e9-datado. billOfSale <code>String?</code> Documento de venda associado \u00e0 transa\u00e7\u00e3o. Este campo \u00e9 opcional. dateTimeOfSale <code>Date?</code> Data e hora em que a venda foi realizada. Este campo \u00e9 opcional. externalId <code>String?</code> Identificador externo para a transa\u00e7\u00e3o, se necess\u00e1rio. Este campo \u00e9 opcional. deadline <code>Int?</code> Data de expira\u00e7\u00e3o da primeira parcela, em dias. Este campo \u00e9 opcional."},{"location":"transactions/paykit/#retorno-da-transacao","title":"Retorno da transa\u00e7\u00e3o","text":"<p>O objeto <code>PaymentResult</code>, retornado no callback da transa\u00e7\u00e3o, cont\u00e9m informa\u00e7\u00f5es essenciais da adquirente. Abaixo est\u00e3o os principais campos dispon\u00edveis:</p> Campo Tipo Descri\u00e7\u00e3o id <code>String</code> Identificador \u00fanico da transa\u00e7\u00e3o (NSU). processor <code>Enum</code> Indica o processador da transa\u00e7\u00e3o. Valores poss\u00edveis: - <code>STONE</code> - <code>TEF</code> - <code>REDE</code> - <code>GETNET</code> - `PAGSEGURO - <code>VERO</code> status <code>Enum</code> Representa o status da transa\u00e7\u00e3o. Valores poss\u00edveis: - <code>PENDING</code>: Aguardando processamento. - <code>APPROVED</code>: Transa\u00e7\u00e3o aprovada. - <code>CANCELLED</code>: Transa\u00e7\u00e3o cancelada. - <code>ERROR</code>: Ocorreu um erro na transa\u00e7\u00e3o. - <code>DECLINED</code>: Transa\u00e7\u00e3o recusada. transactionData <code>Map&lt;String, String&gt;</code> Inclui os dados da transa\u00e7\u00e3o da adquirente. message <code>String</code> Mensagem de sucesso ou erro, caso aplic\u00e1vel."},{"location":"transactions/pix/","title":"Pix","text":"<p>O processo para realizar qualquer transa\u00e7\u00e3o, tem como premissa que a ativa\u00e7\u00e3o do SDK foi previamente realizada.  Para realizar uma Transa\u00e7\u00e3o de PIX, utilize o exemplo abaixo. </p> <p>Aten\u00e7\u00e3o</p> <p>Verifique os parametros da transa\u00e7\u00e3o. Os atributos devem seguir os crit\u00e9rios: - amount: MAIOR ou igual a 1</p> <pre><code>import android.os.Bundle\nimport android.util.Log\nimport androidx.appcompat.app.AppCompatActivity\nimport com.linx.paykit.common.Callback\nimport com.linx.paykit.common.Paykit\nimport com.linx.paykit.common.PaymentResult\nimport com.linx.paykit.common.builder.Parameters\nimport com.linx.paykit.common.parameter.PaymentParameters\nimport com.linx.paykit.core.PaykitFactory\nimport java.math.BigDecimal\n\nclass MainActivity : AppCompatActivity() {\n\n    private lateinit var paykit: Paykit\n\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        setContentView(R.layout.activity_main)\n\n        paykit = PaykitFactory().build(Parameters(this.applicationContext, \"Transacao de PIX\"))\n\n        val pixParameter = PaymentParameters(\n            amount = BigDecimal(\"100.00\"),  // Valor da transa\u00e7\u00e3o\n            automaticConfirmation = true  // Confirma\u00e7\u00e3o autom\u00e1tica\n        )\n\n        paykit.pix(pixParameter, object : Callback&lt;PaymentResult&gt; {\n            override fun execute(result: PaymentResult) {\n                Log.i(\"PaymentResult\", \"ID: ${result.transactionId}, Transaction: ${result.transaction}\")\n                onPaymentResult(result.transactionId, result.transaction)\n            }\n        })\n    }\n\n    private fun onPaymentResult(transactionId: String, transaction: PaymentResult) {\n        // Implementar a l\u00f3gica para lidar com o resultado do pagamento\n    }\n}\n</code></pre>"},{"location":"transactions/pix/#explicacao-do-paymentresult","title":"Explica\u00e7\u00e3o do PaymentResult","text":"<p>No <code>callBack</code> da transa\u00e7\u00e3o, \u00e9 poss\u00edvel capturar detalhes da adquirente, como detalhado a seguir.</p> <ul> <li>transactionId: Identificador \u00fanico da transa\u00e7\u00e3o (NSU).</li> <li>transaction: Objeto contendo o resultado detalhado da transa\u00e7\u00e3o da adquirente, \u00fatil para deserializa\u00e7\u00e3o.</li> <li>transactionType: Tipo de processador de pagamento utilizado (STONE, TEF, REDE, GETNET, PAGSEGURO).</li> <li>status: Status da transa\u00e7\u00e3o.</li> <li>message: Mensagem de sucesso ou erro, se houver.</li> </ul>"},{"location":"transactions/reimpressao/","title":"Reimpress\u00e3o","text":"<p>O processo para realizar qualquer transa\u00e7\u00e3o, tem como premissa que a ativa\u00e7\u00e3o do SDK foi previamente realizada.  Para realizar uma Transa\u00e7\u00e3o de Reimpress\u00e3o, utilize o exemplo abaixo. Ela realizar\u00e1 o desfazimento da \u00faltima transa\u00e7\u00e3o.</p> <pre><code>import android.os.Bundle\nimport android.util.Log\nimport androidx.appcompat.app.AppCompatActivity\nimport com.linx.paykit.common.Callback\nimport com.linx.paykit.common.Paykit\nimport com.linx.paykit.common.PaymentResult\nimport com.linx.paykit.common.builder.Parameters\nimport com.linx.paykit.common.parameter.ReprintParameters\nimport com.linx.paykit.core.PaykitFactory\nimport java.math.BigDecimal\n\nclass MainActivity : AppCompatActivity() {\n\n    private lateinit var paykit: Paykit\n\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n\n\n        val reprintParameter = ReprintParameters(\n            receiptParameter.MERCHANT,  // Ou receiptParameter.CLIENT\n            reprintParameters.nsu = \"NSU_DA_TRANSACAO\"\n        )\n\n        paykit = PaykitFactory().build(Parameters(this.applicationContext, \"Transacao de Reimpress\u00e3o\"))\n\n        paykit.reprint(reprintParameter, object : Callback&lt;PaymentResult&gt; {\n            override fun execute(result: PaymentResult) {\n                Log.i(\"PaymentResult\", \"Status: ${result.status}\")\n                onPaymentResult(result.transaction)\n            }\n        })\n    }\n\n    private fun onPaymentResult(transaction: PaymentResult) {\n        // Implementar a l\u00f3gica para lidar com o resultado da revers\u00e3o\n    }\n}\n</code></pre>"},{"location":"transactions/reimpressao/#explicacao-do-paymentresult","title":"Explica\u00e7\u00e3o do PaymentResult","text":"<p>No <code>callBack</code> da transa\u00e7\u00e3o, \u00e9 poss\u00edvel capturar detalhes da adquirente, como detalhado a seguir.</p> <ul> <li>transactionType: Tipo de processador de pagamento utilizado (STONE, TEF, REDE, GETNET, PAGSEGURO).</li> <li>status: Status da transa\u00e7\u00e3o.</li> <li>message: Mensagem de sucesso ou erro, se houver.</li> </ul>"},{"location":"transactions/voucher/","title":"Voucher","text":"<p>O processo para realizar qualquer transa\u00e7\u00e3o, tem como premissa que a ativa\u00e7\u00e3o do SDK foi previamente realizada.  Para realizar uma Transa\u00e7\u00e3o de Voucher, utilize o exemplo abaixo. </p> <p>Aten\u00e7\u00e3o</p> <p>Verifique os parametros da transa\u00e7\u00e3o. Os atributos devem seguir os crit\u00e9rios:  - amount: MAIOR ou igual a 1</p> <pre><code>import android.os.Bundle\nimport android.util.Log\nimport androidx.appcompat.app.AppCompatActivity\nimport com.linx.paykit.common.Callback\nimport com.linx.paykit.common.Paykit\nimport com.linx.paykit.common.PaymentResult\nimport com.linx.paykit.common.builder.Parameters\nimport com.linx.paykit.common.parameter.PaymentParameters\nimport com.linx.paykit.core.PaykitFactory\nimport java.math.BigDecimal\n\nclass MainActivity : AppCompatActivity() {\n\n    private lateinit var paykit: Paykit\n\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        setContentView(R.layout.activity_main)\n\n        paykit = PaykitFactory().build(Parameters(this.applicationContext, \"Transacao de Debito\"))\n\n        val debitParameter = PaymentParameters(\n            amount = BigDecimal(\"100.00\"),  // Valor da transa\u00e7\u00e3o\n            automaticConfirmation = true  // Confirma\u00e7\u00e3o autom\u00e1tica\n        )\n\n        paykit.credit(debitParameter, object : Callback&lt;PaymentResult&gt; {\n            override fun execute(result: PaymentResult) {\n                Log.i(\"PaymentResult\", \"ID: ${result.transactionId}, Transaction: ${result.transaction}\")\n                onPaymentResult(result.transactionId, result.transaction)\n            }\n        })\n    }\n\n    private fun onPaymentResult(transactionId: String, transaction: PaymentResult) {\n        // Implementar a l\u00f3gica para lidar com o resultado do pagamento\n    }\n}\n</code></pre>"},{"location":"transactions/voucher/#explicacao-do-paymentresult","title":"Explica\u00e7\u00e3o do PaymentResult","text":"<p>No <code>callBack</code> da transa\u00e7\u00e3o, \u00e9 poss\u00edvel capturar detalhes da adquirente, como detalhado a seguir.</p> <ul> <li>transactionId: Identificador \u00fanico da transa\u00e7\u00e3o (NSU).</li> <li>transaction: Objeto contendo o resultado detalhado da transa\u00e7\u00e3o da adquirente, \u00fatil para deserializa\u00e7\u00e3o.</li> <li>transactionType: Tipo de processador de pagamento utilizado (STONE, TEF, REDE, GETNET, PAGSEGURO).</li> <li>status: Status da transa\u00e7\u00e3o.</li> <li>message: Mensagem de sucesso ou erro, se houver.</li> </ul>"}]}